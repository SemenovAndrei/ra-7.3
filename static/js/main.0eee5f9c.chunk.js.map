{"version":3,"sources":["components/MonthTable/MonthTable.jsx","components/SortTable/SortTable.jsx","components/WithSort/WithSort.jsx","components/YearTable/YearTable.jsx","Data.js","Loading_icon.gif","App.js","reportWebVitals.js","index.js"],"names":["MonthTable","props","console","log","list","map","item","month","amount","SortTable","date","id","WithSort","Component","type","YearTable","year","Data","this","current","data","sortList","sort","a","b","forEach","el","nanoid","dateWithValues","separatedDate","split","months","replaceMonthsNamed","addValue","years","addId","arr","value","result","index","findIndex","e","push","moment","format","substring","reverse","addValues","SortMonths","SortYears","SortTableData","App","useState","setList","loading","setLoading","error","setError","useEffect","fetch","process","method","response","status","ok","json","getData","message","loadData","className","src","load","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0eee5f9c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MonthTable(props) {\n  console.log('MonthTable', props)\n\n  return (\n    <div>\n      <h2>Month Table</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Month</th>\n            <th>Amount</th>\n          </tr>\n          {props.list.map((item) => (\n            <tr key={item.month}>\n              <td>{item.month}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nMonthTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      month: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    })\n  ),\n}\n\nexport default MonthTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SortTable(props) {\n  console.log('SortTable', props)\n\n  return (\n    <div>\n      <h2>Sort Table</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Date</th>\n            <th>Amount</th>\n          </tr>\n          {props.list.map((item) => (\n            <tr key={item.id}>\n              <td>{item.date}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nSortTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    })\n  ),\n}\n\nexport default SortTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction WithSort(Component, type = 'sortList') {\n  return function (props) {\n    return <Component list={props[type]} />\n  }\n}\n\nWithSort.propTypes = {\n  list: PropTypes.shape({\n    months: PropTypes.arrayOf({\n      month: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    }),\n    years: PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      amount: PropTypes.number.isRequired,\n    }),\n    sortList: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    }),\n  }),\n}\n\nexport default WithSort\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction YearTable(props) {\n  console.log('YearTable', props)\n\n  return (\n    <div>\n      <h2>Year Table</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Year</th>\n            <th>Amount</th>\n          </tr>\n          {props.list.map((item) => (\n            <tr key={item.year}>\n              <td>{item.year}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nYearTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    })\n  ),\n}\n\nexport default YearTable\n","import moment from 'moment'\nimport { nanoid } from 'nanoid'\n\nexport default class Data {\n  constructor(list) {\n    this.current = '2018'\n    this.list = list.list\n    this.data = {}\n  }\n\n  sortList() {\n    this.data.sortList = this.list.sort((a, b) => {\n      if (a.date < b.date) {\n        return 1\n      }\n      return -1\n    })\n  }\n\n  addId() {\n    this.data.sortList.forEach((el) => (el.id = nanoid()))\n  }\n\n  addValues() {\n    const dateWithValues = this.data.sortList.map((el) => {\n      const separatedDate = el.date.split('-')\n      return { ...el, year: separatedDate[0], month: separatedDate[1] }\n    })\n\n    this.data.months = this.replaceMonthsNamed(this.addValue(dateWithValues, 'month'))\n    this.data.years = this.addValue(dateWithValues, 'year')\n    this.addId()\n  }\n\n  addValue(arr, value) {\n    const result = []\n\n    arr.forEach((el) => {\n      if (value === 'month' && el.year !== this.current) {\n        return\n      }\n\n      const index = result.findIndex((e) => e[value] === el[value])\n\n      if (index !== -1) {\n        result[index].amount += el.amount\n        return\n      }\n\n      result.push({ [value]: el[value], amount: el.amount })\n    })\n\n    return result\n  }\n\n  replaceMonthsNamed(arr) {\n    const result = arr.map((el) => {\n      return {\n        ...el,\n        month: moment(`${this.current}${el.month}01`).format('MMMM').substring(0, 3),\n      }\n    })\n    return result.reverse()\n  }\n\n  getData() {\n    this.sortList()\n    this.addValues()\n\n    return this.data\n  }\n}\n","export default __webpack_public_path__ + \"static/media/Loading_icon.1a32f552.gif\";","import { nanoid } from 'nanoid'\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport MonthTable from './components/MonthTable/MonthTable'\nimport SortTable from './components/SortTable/SortTable'\nimport WithSort from './components/WithSort/WithSort'\nimport YearTable from './components/YearTable/YearTable'\nimport Data from './Data'\nimport load from './Loading_icon.gif'\n\nconst SortMonths = WithSort(MonthTable, 'months')\nconst SortYears = WithSort(YearTable, 'years')\nconst SortTableData = WithSort(SortTable)\n\nfunction App() {\n  const [list, setList] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  const result = !list ? (\n    <h3>{error}</h3>\n  ) : (\n    [\n      <SortMonths key={nanoid()} {...list} />,\n      <SortYears key={nanoid()} {...list} />,\n      <SortTableData key={nanoid()} {...list} />,\n    ]\n  )\n\n  useEffect(() => {\n    const loadData = async () => {\n      setError('')\n      setLoading(true)\n      try {\n        const response = await fetch(process.env.REACT_APP_URL_DATA, { method: 'GET' })\n\n        if (response.status === 200 && response.ok) {\n          const json = await response.json()\n\n          setError('')\n          setList(new Data(json).getData())\n        }\n      } catch (e) {\n        setError(e.message)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadData()\n  }, [])\n\n  return (\n    <div className=\"App\" id=\"app\">\n      {loading && <img className=\"load-spinner\" src={load} alt=\"loader\" />}\n      {result}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}